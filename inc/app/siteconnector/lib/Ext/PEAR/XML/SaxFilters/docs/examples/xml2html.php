<?php
/*
Shows a basic example of parsing an XML data set of the type generated by
phpMyAdmin into an HTML table
*/
# define('XML_SAXFILTERS', '../../');
define('XML_SAXFILTERS', 'XML/');
// Include AbstractFilter
require_once(XML_SAXFILTERS.'XML_SaxFilters.php');

// Include the writer output class
require_once(XML_SAXFILTERS.'SaxFilters/IO/FileWriter.php');

/**
 * Filter for converting an XML data set to HTML
 * @access public
 */
class DataSetFilter extends XML_SaxFilters_AbstractFilter /* implements XML_SaxFilters_FilterInterface */
{
    /**
     * Switch to determine if we're in a dataset row
     * @var boolean
     */
    var $inRow = false;

    /**
     * The current column name
     * @var string
     */
    var $column = '';

    /**
     * Array of data from a row
     * @var array
     */
    var $row;

    /**
     * Start Element Handler
     * @param string name of tag
     * @param array tag attributes
     * @return void
     * @access protected
     */
    function startElementHandler($name,$attribs)
    {
        if ( $name == 'founding_fathers' )
        {
            $this->inRow = true;
            $this->writer->write("  <tr>\n");
        }
        else if ( $this->inRow )
        {
            $this->column = $name;
        }
    }

    /**
     * End Element Handler
     * @param string name of tag
     * @return void
     * @access protected
     */
    function endElementHandler($name)
    {
        if ( $name == 'founding_fathers' )
        {
            $this->inRow = false;
            $this->writer->write("  </tr>\n");
        }
        else if ( $this->inRow )
        {
            $this->column = '';
        }
    }

    /**
     * Character Data Handler
     * @param string contents inside a tag
     * @return void
     * @access protected
     */
    function characterDataHandler($data)
    {
        if ( $this->inRow )
        {
            switch ( $this->column ) {
                case 'first':
                case 'last':
                    $this->writer->write("    <td>".$data."</td>\n");
                break;
            }
        }
    }
}

// Instantiate the FileWriter
$writer = & new XML_SaxFilters_FileWriter('founding_fathers.html');

// Write some data
$writer->write("<table>\n");
$writer->write("  <caption>The Found Fathers</caption>\n");
$writer->write("  <tr>\n");
$writer->write("    <th>First Name</th>\n    <th>Last Name</th>\n");
$writer->write("  </tr>\n");

$file = 'founding_fathers.xml';

// Create an ExpatParser, passing it the file reader
$parser = & XML_SaxFilters_createParser('HTMLSax','File',$file);

// Instantiate the RSSFilter
$filter = & new DataSetFilter;

// Set the writer that the filter will use
$filter->setWriter($writer);

// Set the parser's child to the filter
$parser->setChild($filter);

// Parse the XML document
$parser->parse();

// Finish writing
$writer->write("</table>\n");
$writer->close();

// Display the written file
readfile('founding_fathers.html');
?>